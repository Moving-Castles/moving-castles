// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

uint256 constant _tableId = uint256(bytes32(abi.encodePacked(bytes16("moving_castles"), bytes16("game_config"))));
uint256 constant GameConfigTableId = _tableId;

struct GameConfigData {
  int32 worldHeight;
  int32 worldWidth;
  uint32 initialEnergy;
  uint32 defaultCarryingCapacity;
  uint32 moveCost;
  uint32 pickUpCost;
  uint32 dropCost;
  uint32 transferCost;
  uint32 playCost;
  uint32 moveCooldown;
  uint32 openCost;
  uint32 harvestCost;
  uint32 organMatter;
}

library GameConfig {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](13);
    _schema[0] = SchemaType.INT32;
    _schema[1] = SchemaType.INT32;
    _schema[2] = SchemaType.UINT32;
    _schema[3] = SchemaType.UINT32;
    _schema[4] = SchemaType.UINT32;
    _schema[5] = SchemaType.UINT32;
    _schema[6] = SchemaType.UINT32;
    _schema[7] = SchemaType.UINT32;
    _schema[8] = SchemaType.UINT32;
    _schema[9] = SchemaType.UINT32;
    _schema[10] = SchemaType.UINT32;
    _schema[11] = SchemaType.UINT32;
    _schema[12] = SchemaType.UINT32;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](0);

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](13);
    _fieldNames[0] = "worldHeight";
    _fieldNames[1] = "worldWidth";
    _fieldNames[2] = "initialEnergy";
    _fieldNames[3] = "defaultCarryingCapacity";
    _fieldNames[4] = "moveCost";
    _fieldNames[5] = "pickUpCost";
    _fieldNames[6] = "dropCost";
    _fieldNames[7] = "transferCost";
    _fieldNames[8] = "playCost";
    _fieldNames[9] = "moveCooldown";
    _fieldNames[10] = "openCost";
    _fieldNames[11] = "harvestCost";
    _fieldNames[12] = "organMatter";
    return ("GameConfig", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get worldHeight */
  function getWorldHeight() internal view returns (int32 worldHeight) {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 0);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Get worldHeight (using the specified store) */
  function getWorldHeight(IStore _store) internal view returns (int32 worldHeight) {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 0);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Set worldHeight */
  function setWorldHeight(int32 worldHeight) internal {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    StoreSwitch.setField(_tableId, _primaryKeys, 0, abi.encodePacked((worldHeight)));
  }

  /** Set worldHeight (using the specified store) */
  function setWorldHeight(IStore _store, int32 worldHeight) internal {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    _store.setField(_tableId, _primaryKeys, 0, abi.encodePacked((worldHeight)));
  }

  /** Get worldWidth */
  function getWorldWidth() internal view returns (int32 worldWidth) {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 1);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Get worldWidth (using the specified store) */
  function getWorldWidth(IStore _store) internal view returns (int32 worldWidth) {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 1);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Set worldWidth */
  function setWorldWidth(int32 worldWidth) internal {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    StoreSwitch.setField(_tableId, _primaryKeys, 1, abi.encodePacked((worldWidth)));
  }

  /** Set worldWidth (using the specified store) */
  function setWorldWidth(IStore _store, int32 worldWidth) internal {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    _store.setField(_tableId, _primaryKeys, 1, abi.encodePacked((worldWidth)));
  }

  /** Get initialEnergy */
  function getInitialEnergy() internal view returns (uint32 initialEnergy) {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 2);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get initialEnergy (using the specified store) */
  function getInitialEnergy(IStore _store) internal view returns (uint32 initialEnergy) {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 2);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set initialEnergy */
  function setInitialEnergy(uint32 initialEnergy) internal {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    StoreSwitch.setField(_tableId, _primaryKeys, 2, abi.encodePacked((initialEnergy)));
  }

  /** Set initialEnergy (using the specified store) */
  function setInitialEnergy(IStore _store, uint32 initialEnergy) internal {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    _store.setField(_tableId, _primaryKeys, 2, abi.encodePacked((initialEnergy)));
  }

  /** Get defaultCarryingCapacity */
  function getDefaultCarryingCapacity() internal view returns (uint32 defaultCarryingCapacity) {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 3);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get defaultCarryingCapacity (using the specified store) */
  function getDefaultCarryingCapacity(IStore _store) internal view returns (uint32 defaultCarryingCapacity) {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 3);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set defaultCarryingCapacity */
  function setDefaultCarryingCapacity(uint32 defaultCarryingCapacity) internal {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    StoreSwitch.setField(_tableId, _primaryKeys, 3, abi.encodePacked((defaultCarryingCapacity)));
  }

  /** Set defaultCarryingCapacity (using the specified store) */
  function setDefaultCarryingCapacity(IStore _store, uint32 defaultCarryingCapacity) internal {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    _store.setField(_tableId, _primaryKeys, 3, abi.encodePacked((defaultCarryingCapacity)));
  }

  /** Get moveCost */
  function getMoveCost() internal view returns (uint32 moveCost) {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 4);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get moveCost (using the specified store) */
  function getMoveCost(IStore _store) internal view returns (uint32 moveCost) {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 4);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set moveCost */
  function setMoveCost(uint32 moveCost) internal {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    StoreSwitch.setField(_tableId, _primaryKeys, 4, abi.encodePacked((moveCost)));
  }

  /** Set moveCost (using the specified store) */
  function setMoveCost(IStore _store, uint32 moveCost) internal {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    _store.setField(_tableId, _primaryKeys, 4, abi.encodePacked((moveCost)));
  }

  /** Get pickUpCost */
  function getPickUpCost() internal view returns (uint32 pickUpCost) {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 5);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get pickUpCost (using the specified store) */
  function getPickUpCost(IStore _store) internal view returns (uint32 pickUpCost) {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 5);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set pickUpCost */
  function setPickUpCost(uint32 pickUpCost) internal {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    StoreSwitch.setField(_tableId, _primaryKeys, 5, abi.encodePacked((pickUpCost)));
  }

  /** Set pickUpCost (using the specified store) */
  function setPickUpCost(IStore _store, uint32 pickUpCost) internal {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    _store.setField(_tableId, _primaryKeys, 5, abi.encodePacked((pickUpCost)));
  }

  /** Get dropCost */
  function getDropCost() internal view returns (uint32 dropCost) {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 6);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get dropCost (using the specified store) */
  function getDropCost(IStore _store) internal view returns (uint32 dropCost) {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 6);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set dropCost */
  function setDropCost(uint32 dropCost) internal {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    StoreSwitch.setField(_tableId, _primaryKeys, 6, abi.encodePacked((dropCost)));
  }

  /** Set dropCost (using the specified store) */
  function setDropCost(IStore _store, uint32 dropCost) internal {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    _store.setField(_tableId, _primaryKeys, 6, abi.encodePacked((dropCost)));
  }

  /** Get transferCost */
  function getTransferCost() internal view returns (uint32 transferCost) {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 7);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get transferCost (using the specified store) */
  function getTransferCost(IStore _store) internal view returns (uint32 transferCost) {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 7);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set transferCost */
  function setTransferCost(uint32 transferCost) internal {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    StoreSwitch.setField(_tableId, _primaryKeys, 7, abi.encodePacked((transferCost)));
  }

  /** Set transferCost (using the specified store) */
  function setTransferCost(IStore _store, uint32 transferCost) internal {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    _store.setField(_tableId, _primaryKeys, 7, abi.encodePacked((transferCost)));
  }

  /** Get playCost */
  function getPlayCost() internal view returns (uint32 playCost) {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 8);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get playCost (using the specified store) */
  function getPlayCost(IStore _store) internal view returns (uint32 playCost) {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 8);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set playCost */
  function setPlayCost(uint32 playCost) internal {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    StoreSwitch.setField(_tableId, _primaryKeys, 8, abi.encodePacked((playCost)));
  }

  /** Set playCost (using the specified store) */
  function setPlayCost(IStore _store, uint32 playCost) internal {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    _store.setField(_tableId, _primaryKeys, 8, abi.encodePacked((playCost)));
  }

  /** Get moveCooldown */
  function getMoveCooldown() internal view returns (uint32 moveCooldown) {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 9);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get moveCooldown (using the specified store) */
  function getMoveCooldown(IStore _store) internal view returns (uint32 moveCooldown) {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 9);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set moveCooldown */
  function setMoveCooldown(uint32 moveCooldown) internal {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    StoreSwitch.setField(_tableId, _primaryKeys, 9, abi.encodePacked((moveCooldown)));
  }

  /** Set moveCooldown (using the specified store) */
  function setMoveCooldown(IStore _store, uint32 moveCooldown) internal {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    _store.setField(_tableId, _primaryKeys, 9, abi.encodePacked((moveCooldown)));
  }

  /** Get openCost */
  function getOpenCost() internal view returns (uint32 openCost) {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 10);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get openCost (using the specified store) */
  function getOpenCost(IStore _store) internal view returns (uint32 openCost) {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 10);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set openCost */
  function setOpenCost(uint32 openCost) internal {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    StoreSwitch.setField(_tableId, _primaryKeys, 10, abi.encodePacked((openCost)));
  }

  /** Set openCost (using the specified store) */
  function setOpenCost(IStore _store, uint32 openCost) internal {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    _store.setField(_tableId, _primaryKeys, 10, abi.encodePacked((openCost)));
  }

  /** Get harvestCost */
  function getHarvestCost() internal view returns (uint32 harvestCost) {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 11);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get harvestCost (using the specified store) */
  function getHarvestCost(IStore _store) internal view returns (uint32 harvestCost) {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 11);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set harvestCost */
  function setHarvestCost(uint32 harvestCost) internal {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    StoreSwitch.setField(_tableId, _primaryKeys, 11, abi.encodePacked((harvestCost)));
  }

  /** Set harvestCost (using the specified store) */
  function setHarvestCost(IStore _store, uint32 harvestCost) internal {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    _store.setField(_tableId, _primaryKeys, 11, abi.encodePacked((harvestCost)));
  }

  /** Get organMatter */
  function getOrganMatter() internal view returns (uint32 organMatter) {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 12);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get organMatter (using the specified store) */
  function getOrganMatter(IStore _store) internal view returns (uint32 organMatter) {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 12);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set organMatter */
  function setOrganMatter(uint32 organMatter) internal {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    StoreSwitch.setField(_tableId, _primaryKeys, 12, abi.encodePacked((organMatter)));
  }

  /** Set organMatter (using the specified store) */
  function setOrganMatter(IStore _store, uint32 organMatter) internal {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    _store.setField(_tableId, _primaryKeys, 12, abi.encodePacked((organMatter)));
  }

  /** Get the full data */
  function get() internal view returns (GameConfigData memory _table) {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _primaryKeys, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store) internal view returns (GameConfigData memory _table) {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    bytes memory _blob = _store.getRecord(_tableId, _primaryKeys, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    int32 worldHeight,
    int32 worldWidth,
    uint32 initialEnergy,
    uint32 defaultCarryingCapacity,
    uint32 moveCost,
    uint32 pickUpCost,
    uint32 dropCost,
    uint32 transferCost,
    uint32 playCost,
    uint32 moveCooldown,
    uint32 openCost,
    uint32 harvestCost,
    uint32 organMatter
  ) internal {
    bytes memory _data = encode(
      worldHeight,
      worldWidth,
      initialEnergy,
      defaultCarryingCapacity,
      moveCost,
      pickUpCost,
      dropCost,
      transferCost,
      playCost,
      moveCooldown,
      openCost,
      harvestCost,
      organMatter
    );

    bytes32[] memory _primaryKeys = new bytes32[](0);

    StoreSwitch.setRecord(_tableId, _primaryKeys, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    int32 worldHeight,
    int32 worldWidth,
    uint32 initialEnergy,
    uint32 defaultCarryingCapacity,
    uint32 moveCost,
    uint32 pickUpCost,
    uint32 dropCost,
    uint32 transferCost,
    uint32 playCost,
    uint32 moveCooldown,
    uint32 openCost,
    uint32 harvestCost,
    uint32 organMatter
  ) internal {
    bytes memory _data = encode(
      worldHeight,
      worldWidth,
      initialEnergy,
      defaultCarryingCapacity,
      moveCost,
      pickUpCost,
      dropCost,
      transferCost,
      playCost,
      moveCooldown,
      openCost,
      harvestCost,
      organMatter
    );

    bytes32[] memory _primaryKeys = new bytes32[](0);

    _store.setRecord(_tableId, _primaryKeys, _data);
  }

  /** Set the full data using the data struct */
  function set(GameConfigData memory _table) internal {
    set(
      _table.worldHeight,
      _table.worldWidth,
      _table.initialEnergy,
      _table.defaultCarryingCapacity,
      _table.moveCost,
      _table.pickUpCost,
      _table.dropCost,
      _table.transferCost,
      _table.playCost,
      _table.moveCooldown,
      _table.openCost,
      _table.harvestCost,
      _table.organMatter
    );
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, GameConfigData memory _table) internal {
    set(
      _store,
      _table.worldHeight,
      _table.worldWidth,
      _table.initialEnergy,
      _table.defaultCarryingCapacity,
      _table.moveCost,
      _table.pickUpCost,
      _table.dropCost,
      _table.transferCost,
      _table.playCost,
      _table.moveCooldown,
      _table.openCost,
      _table.harvestCost,
      _table.organMatter
    );
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal pure returns (GameConfigData memory _table) {
    _table.worldHeight = (int32(uint32(Bytes.slice4(_blob, 0))));

    _table.worldWidth = (int32(uint32(Bytes.slice4(_blob, 4))));

    _table.initialEnergy = (uint32(Bytes.slice4(_blob, 8)));

    _table.defaultCarryingCapacity = (uint32(Bytes.slice4(_blob, 12)));

    _table.moveCost = (uint32(Bytes.slice4(_blob, 16)));

    _table.pickUpCost = (uint32(Bytes.slice4(_blob, 20)));

    _table.dropCost = (uint32(Bytes.slice4(_blob, 24)));

    _table.transferCost = (uint32(Bytes.slice4(_blob, 28)));

    _table.playCost = (uint32(Bytes.slice4(_blob, 32)));

    _table.moveCooldown = (uint32(Bytes.slice4(_blob, 36)));

    _table.openCost = (uint32(Bytes.slice4(_blob, 40)));

    _table.harvestCost = (uint32(Bytes.slice4(_blob, 44)));

    _table.organMatter = (uint32(Bytes.slice4(_blob, 48)));
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    int32 worldHeight,
    int32 worldWidth,
    uint32 initialEnergy,
    uint32 defaultCarryingCapacity,
    uint32 moveCost,
    uint32 pickUpCost,
    uint32 dropCost,
    uint32 transferCost,
    uint32 playCost,
    uint32 moveCooldown,
    uint32 openCost,
    uint32 harvestCost,
    uint32 organMatter
  ) internal view returns (bytes memory) {
    return
      abi.encodePacked(
        worldHeight,
        worldWidth,
        initialEnergy,
        defaultCarryingCapacity,
        moveCost,
        pickUpCost,
        dropCost,
        transferCost,
        playCost,
        moveCooldown,
        openCost,
        harvestCost,
        organMatter
      );
  }

  /* Delete all data for given keys */
  function deleteRecord() internal {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    StoreSwitch.deleteRecord(_tableId, _primaryKeys);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store) internal {
    bytes32[] memory _primaryKeys = new bytes32[](0);

    _store.deleteRecord(_tableId, _primaryKeys);
  }
}
