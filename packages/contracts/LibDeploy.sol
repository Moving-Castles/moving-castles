// SPDX-License-Identifier: MIT 
pragma solidity >=0.8.0;

// NOTE: This file is autogenerated via `mud codegen-libdeploy` from `deploy.json`. Do not edit manually.

// Foundry
import { console } from "forge-std/console.sol";

// Solecs 
import { IWorld } from "solecs/interfaces/IWorld.sol";
import { World } from "solecs/World.sol";
import { IComponent } from "solecs/interfaces/IComponent.sol";
import { getAddressById } from "solecs/utils.sol";
import { IUint256Component } from "solecs/interfaces/IUint256Component.sol";
import { ISystem } from "solecs/interfaces/ISystem.sol";
import { SystemStorage } from "solecs/SystemStorage.sol";

// Components (requires 'components=...' remapping in project's remappings.txt)
import { GameConfigComponent, ID as GameConfigComponentID } from "components/GameConfigComponent.sol";
import { CoreComponent, ID as CoreComponentID } from "components/CoreComponent.sol";
import { CommitComponent, ID as CommitComponentID } from "components/CommitComponent.sol";
import { PositionComponent, ID as PositionComponentID } from "components/PositionComponent.sol";
import { EnergyComponent, ID as EnergyComponentID } from "components/EnergyComponent.sol";
import { CreationBlockComponent, ID as CreationBlockComponentID } from "components/CreationBlockComponent.sol";
import { ReadyBlockComponent, ID as ReadyBlockComponentID } from "components/ReadyBlockComponent.sol";
import { PortableComponent, ID as PortableComponentID } from "components/PortableComponent.sol";
import { CarryingCapacityComponent, ID as CarryingCapacityComponentID } from "components/CarryingCapacityComponent.sol";
import { CarriedByComponent, ID as CarriedByComponentID } from "components/CarriedByComponent.sol";
import { AbilityMoveComponent, ID as AbilityMoveComponentID } from "components/AbilityMoveComponent.sol";
import { AbilityConsumeComponent, ID as AbilityConsumeComponentID } from "components/AbilityConsumeComponent.sol";
import { AbilityPlayComponent, ID as AbilityPlayComponentID } from "components/AbilityPlayComponent.sol";
import { AbilityChatComponent, ID as AbilityChatComponentID } from "components/AbilityChatComponent.sol";
import { UntraversableComponent, ID as UntraversableComponentID } from "components/UntraversableComponent.sol";
import { LootComponent, ID as LootComponentID } from "components/LootComponent.sol";
import { GoalComponent, ID as GoalComponentID } from "components/GoalComponent.sol";
import { PointComponent, ID as PointComponentID } from "components/PointComponent.sol";
import { MatterComponent, ID as MatterComponentID } from "components/MatterComponent.sol";

// Systems (requires 'systems=...' remapping in project's remappings.txt)
import { ComponentDevSystem, ID as ComponentDevSystemID } from "systems/ComponentDevSystem.sol";
import { InitSystem, ID as InitSystemID } from "systems/InitSystem.sol";
import { SpawnSystem, ID as SpawnSystemID } from "systems/SpawnSystem.sol";
import { MoveSystem, ID as MoveSystemID } from "systems/MoveSystem.sol";
import { PickUpSystem, ID as PickUpSystemID } from "systems/PickUpSystem.sol";
import { DropSystem, ID as DropSystemID } from "systems/DropSystem.sol";
import { TransferSystem, ID as TransferSystemID } from "systems/TransferSystem.sol";
import { ConsumeSystem, ID as ConsumeSystemID } from "systems/ConsumeSystem.sol";
import { PlaySystem, ID as PlaySystemID } from "systems/PlaySystem.sol";
import { OpenSystem, ID as OpenSystemID } from "systems/OpenSystem.sol";
import { HarvestSystem, ID as HarvestSystemID } from "systems/HarvestSystem.sol";


struct DeployResult {
  IWorld world;
  address deployer;
}

library LibDeploy {
  function deploy(
    address _deployer,
    address _world,
    bool _reuseComponents
  ) internal returns (DeployResult memory result) {
    result.deployer = _deployer;

    // ------------------------
    // Deploy 
    // ------------------------

    // Deploy world
    result.world = _world == address(0) ? new World() : IWorld(_world);
    if (_world == address(0)) result.world.init(); // Init if it's a fresh world

    // Deploy components
    if (!_reuseComponents) {
      IComponent comp;

      console.log("Deploying GameConfigComponent");
      comp = new GameConfigComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying CoreComponent");
      comp = new CoreComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying CommitComponent");
      comp = new CommitComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying PositionComponent");
      comp = new PositionComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying EnergyComponent");
      comp = new EnergyComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying CreationBlockComponent");
      comp = new CreationBlockComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying ReadyBlockComponent");
      comp = new ReadyBlockComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying PortableComponent");
      comp = new PortableComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying CarryingCapacityComponent");
      comp = new CarryingCapacityComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying CarriedByComponent");
      comp = new CarriedByComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying AbilityMoveComponent");
      comp = new AbilityMoveComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying AbilityConsumeComponent");
      comp = new AbilityConsumeComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying AbilityPlayComponent");
      comp = new AbilityPlayComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying AbilityChatComponent");
      comp = new AbilityChatComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying UntraversableComponent");
      comp = new UntraversableComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying LootComponent");
      comp = new LootComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying GoalComponent");
      comp = new GoalComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying PointComponent");
      comp = new PointComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying MatterComponent");
      comp = new MatterComponent(address(result.world));
      console.log(address(comp));
    } 
    
    // Deploy systems 
    deploySystems(address(result.world), true);

    // Call initializer libraries
    if (!_reuseComponents) {
      // Allow initializers to utilize SystemStorage
      SystemStorage.init(result.world, result.world.components());

    }
  }
  
  function authorizeWriter(
    IUint256Component components,
    uint256 componentId,
    address writer
  ) internal {
    IComponent(getAddressById(components, componentId)).authorizeWriter(writer);
  }
  
  /**
   * Deploy systems to the given world.
   * If `init` flag is set, systems with `initialize` setting in `deploy.json` will be executed.
   */
  function deploySystems(
    address _world,
    bool init
  ) internal {
    IWorld world = IWorld(_world);
    // Deploy systems
    ISystem system; 
    IUint256Component components = world.components();

    console.log("Deploying ComponentDevSystem");
    system = new ComponentDevSystem(world, address(components));
    world.registerSystem(address(system), ComponentDevSystemID);
    authorizeWriter(components, GameConfigComponentID, address(system));
    authorizeWriter(components, CoreComponentID, address(system));
    authorizeWriter(components, CommitComponentID, address(system));
    authorizeWriter(components, PositionComponentID, address(system));
    authorizeWriter(components, EnergyComponentID, address(system));
    authorizeWriter(components, CreationBlockComponentID, address(system));
    authorizeWriter(components, ReadyBlockComponentID, address(system));
    authorizeWriter(components, PortableComponentID, address(system));
    authorizeWriter(components, CarryingCapacityComponentID, address(system));
    authorizeWriter(components, CarriedByComponentID, address(system));
    authorizeWriter(components, AbilityMoveComponentID, address(system));
    authorizeWriter(components, AbilityConsumeComponentID, address(system));
    authorizeWriter(components, AbilityPlayComponentID, address(system));
    authorizeWriter(components, AbilityChatComponentID, address(system));
    authorizeWriter(components, UntraversableComponentID, address(system));
    authorizeWriter(components, LootComponentID, address(system));
    authorizeWriter(components, GoalComponentID, address(system));
    authorizeWriter(components, PointComponentID, address(system));
    authorizeWriter(components, MatterComponentID, address(system));
    console.log(address(system));

    console.log("Deploying InitSystem");
    system = new InitSystem(world, address(components));
    world.registerSystem(address(system), InitSystemID);
    authorizeWriter(components, GameConfigComponentID, address(system));
    authorizeWriter(components, CoreComponentID, address(system));
    authorizeWriter(components, CommitComponentID, address(system));
    authorizeWriter(components, PositionComponentID, address(system));
    authorizeWriter(components, EnergyComponentID, address(system));
    authorizeWriter(components, CreationBlockComponentID, address(system));
    authorizeWriter(components, ReadyBlockComponentID, address(system));
    authorizeWriter(components, PortableComponentID, address(system));
    authorizeWriter(components, CarryingCapacityComponentID, address(system));
    authorizeWriter(components, CarriedByComponentID, address(system));
    authorizeWriter(components, AbilityMoveComponentID, address(system));
    authorizeWriter(components, AbilityConsumeComponentID, address(system));
    authorizeWriter(components, AbilityPlayComponentID, address(system));
    authorizeWriter(components, AbilityChatComponentID, address(system));
    authorizeWriter(components, UntraversableComponentID, address(system));
    authorizeWriter(components, LootComponentID, address(system));
    authorizeWriter(components, GoalComponentID, address(system));
    authorizeWriter(components, PointComponentID, address(system));
    authorizeWriter(components, MatterComponentID, address(system));
      if(init) system.execute(new bytes(0));
    console.log(address(system));

    console.log("Deploying SpawnSystem");
    system = new SpawnSystem(world, address(components));
    world.registerSystem(address(system), SpawnSystemID);
    authorizeWriter(components, GameConfigComponentID, address(system));
    authorizeWriter(components, CoreComponentID, address(system));
    authorizeWriter(components, PositionComponentID, address(system));
    authorizeWriter(components, EnergyComponentID, address(system));
    authorizeWriter(components, CreationBlockComponentID, address(system));
    authorizeWriter(components, ReadyBlockComponentID, address(system));
    authorizeWriter(components, PortableComponentID, address(system));
    authorizeWriter(components, CarryingCapacityComponentID, address(system));
    authorizeWriter(components, CarriedByComponentID, address(system));
    authorizeWriter(components, AbilityMoveComponentID, address(system));
    authorizeWriter(components, AbilityConsumeComponentID, address(system));
    authorizeWriter(components, AbilityPlayComponentID, address(system));
    authorizeWriter(components, AbilityChatComponentID, address(system));
    authorizeWriter(components, UntraversableComponentID, address(system));
    authorizeWriter(components, CommitComponentID, address(system));
    authorizeWriter(components, PointComponentID, address(system));
    authorizeWriter(components, LootComponentID, address(system));
    console.log(address(system));

    console.log("Deploying MoveSystem");
    system = new MoveSystem(world, address(components));
    world.registerSystem(address(system), MoveSystemID);
    authorizeWriter(components, GameConfigComponentID, address(system));
    authorizeWriter(components, CoreComponentID, address(system));
    authorizeWriter(components, PositionComponentID, address(system));
    authorizeWriter(components, EnergyComponentID, address(system));
    authorizeWriter(components, ReadyBlockComponentID, address(system));
    authorizeWriter(components, CarriedByComponentID, address(system));
    authorizeWriter(components, AbilityMoveComponentID, address(system));
    authorizeWriter(components, UntraversableComponentID, address(system));
    console.log(address(system));

    console.log("Deploying PickUpSystem");
    system = new PickUpSystem(world, address(components));
    world.registerSystem(address(system), PickUpSystemID);
    authorizeWriter(components, GameConfigComponentID, address(system));
    authorizeWriter(components, CoreComponentID, address(system));
    authorizeWriter(components, PositionComponentID, address(system));
    authorizeWriter(components, EnergyComponentID, address(system));
    authorizeWriter(components, ReadyBlockComponentID, address(system));
    authorizeWriter(components, CarriedByComponentID, address(system));
    authorizeWriter(components, PortableComponentID, address(system));
    authorizeWriter(components, CarryingCapacityComponentID, address(system));
    console.log(address(system));

    console.log("Deploying DropSystem");
    system = new DropSystem(world, address(components));
    world.registerSystem(address(system), DropSystemID);
    authorizeWriter(components, GameConfigComponentID, address(system));
    authorizeWriter(components, CoreComponentID, address(system));
    authorizeWriter(components, PositionComponentID, address(system));
    authorizeWriter(components, EnergyComponentID, address(system));
    authorizeWriter(components, ReadyBlockComponentID, address(system));
    authorizeWriter(components, CarriedByComponentID, address(system));
    authorizeWriter(components, PortableComponentID, address(system));
    authorizeWriter(components, CarryingCapacityComponentID, address(system));
    console.log(address(system));

    console.log("Deploying TransferSystem");
    system = new TransferSystem(world, address(components));
    world.registerSystem(address(system), TransferSystemID);
    authorizeWriter(components, GameConfigComponentID, address(system));
    authorizeWriter(components, CoreComponentID, address(system));
    authorizeWriter(components, PositionComponentID, address(system));
    authorizeWriter(components, EnergyComponentID, address(system));
    authorizeWriter(components, ReadyBlockComponentID, address(system));
    authorizeWriter(components, CarriedByComponentID, address(system));
    authorizeWriter(components, PortableComponentID, address(system));
    authorizeWriter(components, CarryingCapacityComponentID, address(system));
    console.log(address(system));

    console.log("Deploying ConsumeSystem");
    system = new ConsumeSystem(world, address(components));
    world.registerSystem(address(system), ConsumeSystemID);
    authorizeWriter(components, GameConfigComponentID, address(system));
    authorizeWriter(components, CoreComponentID, address(system));
    authorizeWriter(components, EnergyComponentID, address(system));
    authorizeWriter(components, ReadyBlockComponentID, address(system));
    authorizeWriter(components, CarriedByComponentID, address(system));
    authorizeWriter(components, PortableComponentID, address(system));
    authorizeWriter(components, CarryingCapacityComponentID, address(system));
    authorizeWriter(components, AbilityConsumeComponentID, address(system));
    authorizeWriter(components, MatterComponentID, address(system));
    console.log(address(system));

    console.log("Deploying PlaySystem");
    system = new PlaySystem(world, address(components));
    world.registerSystem(address(system), PlaySystemID);
    authorizeWriter(components, GameConfigComponentID, address(system));
    authorizeWriter(components, CoreComponentID, address(system));
    authorizeWriter(components, EnergyComponentID, address(system));
    authorizeWriter(components, ReadyBlockComponentID, address(system));
    authorizeWriter(components, CarriedByComponentID, address(system));
    authorizeWriter(components, AbilityPlayComponentID, address(system));
    authorizeWriter(components, CommitComponentID, address(system));
    console.log(address(system));

    console.log("Deploying OpenSystem");
    system = new OpenSystem(world, address(components));
    world.registerSystem(address(system), OpenSystemID);
    authorizeWriter(components, GameConfigComponentID, address(system));
    authorizeWriter(components, CoreComponentID, address(system));
    authorizeWriter(components, EnergyComponentID, address(system));
    authorizeWriter(components, ReadyBlockComponentID, address(system));
    authorizeWriter(components, CarriedByComponentID, address(system));
    authorizeWriter(components, PortableComponentID, address(system));
    authorizeWriter(components, CarryingCapacityComponentID, address(system));
    authorizeWriter(components, CommitComponentID, address(system));
    authorizeWriter(components, LootComponentID, address(system));
    authorizeWriter(components, AbilityMoveComponentID, address(system));
    authorizeWriter(components, AbilityConsumeComponentID, address(system));
    authorizeWriter(components, AbilityPlayComponentID, address(system));
    authorizeWriter(components, AbilityChatComponentID, address(system));
    authorizeWriter(components, GoalComponentID, address(system));
    authorizeWriter(components, MatterComponentID, address(system));
    console.log(address(system));

    console.log("Deploying HarvestSystem");
    system = new HarvestSystem(world, address(components));
    world.registerSystem(address(system), HarvestSystemID);
    authorizeWriter(components, GameConfigComponentID, address(system));
    authorizeWriter(components, CoreComponentID, address(system));
    authorizeWriter(components, EnergyComponentID, address(system));
    authorizeWriter(components, ReadyBlockComponentID, address(system));
    authorizeWriter(components, CarriedByComponentID, address(system));
    authorizeWriter(components, PortableComponentID, address(system));
    authorizeWriter(components, CarryingCapacityComponentID, address(system));
    authorizeWriter(components, CommitComponentID, address(system));
    authorizeWriter(components, LootComponentID, address(system));
    authorizeWriter(components, GoalComponentID, address(system));
    authorizeWriter(components, PointComponentID, address(system));
    console.log(address(system));
  }
}
